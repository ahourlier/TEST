"""empty message

Revision ID: 01a6fe37c511
Revises: 4f8b1d5d43e6
Create Date: 2022-05-02 14:17:54.710460

"""
from datetime import datetime
from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import Session


# revision identifiers, used by Alembic.
revision = '01a6fe37c511'
down_revision = '4f8b1d5d43e6'
branch_labels = None
depends_on = None


existing_enums = {
    "CoproType": [
        "Copropriété",
        "Monopropriété",
        "Hôtel meublé",
        "Maison individuelle",
        "Autre"
    ],
    "AccessType": [
        "Digicode",
        "Interphone",
        "Clé",
        "Accès libre",
        "Autre"
    ],
    "CoproConstructionTime": [
        "< 1850",
        "1850/1948",
        "1948/1974",
        "1975/1990",
        "> 1990",
        "< 15 ans"
    ],
    "ArchitectQualification": [
        "Moe, ingénieur structure",
        "Architecte",
        "Ingénieur structure"
    ],
    "SyndicType": [
        "Professionnel",
        "Bénévole",
        "Associatif",
        "En ligne",
        "Carence de syndic",
        "AJ sans syndic assistant",
        "AJ avec syndic assistant",
        "Autre"
    ],
    "LotType": [
        "Habitation",
        "Local commercial",
        "Cave",
        "Cellier",
        "Garage vélo",
        "Parking aérien",
        "Parking souterrain",
        "Chambre",
        "Autre"
    ],
    "LotHabitationType":[
        "T1",
        "T1 bis",
        "T2",
        "T3",
        "T4",
        "T5",
        "T6",
        "> T6"
    ],
    "LotLeaseType": [
        "Loi de 1989",
        "Loi de 1948",
        "Bail précaire",
        "Bail commercial",
        "Autre"
    ],
    "LotConventionRentType": [
        "Intermédiaire",
        "Social",
        "Très social",
        "Intermédiation locative",
        "Autre"
    ],
    "PersonStatus": [
        "SCI",
        "Indivision",
        "Entreprise",
        "EPIC",
        "Autre"
    ],
    "BuildingConstructionTime": [
        "< 1850",
        "1850/1948",
        "1948/1974",
        "1975/1990",
        "> 1990",
        "< 15 ans"
    ],
    "BuildingERPCategory": [
        "1ère catégorie",
        "2ème catégorie",
        "3ème catégorie",
        "4ème catégorie",
        "5ème catégorie"
    ],
    "CollectiveHeater": [
        "Gaz",
        "Bois",
        "Electricité",
        "Fioul",
        "ENR",
        "Mixte",
        "Chauffage urbain",
        "Autre"
    ],
    "AsbestosDiagnosisResult": [
        "Présence d''amiante",
        "Suspicion",
        "Absence",
        "En attente de résultat d''analyse"
    ],
    "SecurityCommissionResult": [
        "Avis favorable",
        "Avis défavorable",
        "Autre"
    ],
    "TaskStatus": [
        "A faire",
        "En cours",
        "Terminée",
        "Non concernée"
    ]
}

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    session = Session(bind=bind)
    now = datetime.today().strftime("%Y-%m-%d %H:%M:%S.%f")
    # Merge existing enums
    for (kind, values) in existing_enums.items():
        for value in values:
            # Check if name already exists
            res = session.execute(f"SELECT name FROM core.enum WHERE kind = '{kind}' AND name = '{value}'")
            found = False
            for _ in res:
                found = True
            if not found:
                # Add it if not
                session.execute(
                    "INSERT INTO core.enum (created_at, updated_at, kind, name, display_order, disabled, private) VALUES "
                    f"('{now}', '{now}', '{kind}', '{value}', NULL, false, false)"
                )

    op.add_column('combined_structure', sa.Column('equipment_description', sa.Text(), nullable=True), schema='core')
    op.add_column('copro', sa.Column('caretaker_id', sa.Integer(), nullable=True), schema='core')
    op.drop_constraint('fk_copro_care_taker_id_caretaker', 'copro', schema='core', type_='foreignkey')
    op.create_foreign_key(op.f('fk_copro_caretaker_id_caretaker'), 'copro', 'caretaker', ['caretaker_id'], ['id'], source_schema='core', referent_schema='core')
    op.drop_column('copro', 'care_taker_id', schema='core')
    # op.drop_constraint('fk_mission_detail_job_job', 'mission_detail', schema='core', type_='foreignkey')
    # op.drop_constraint('fk_mission_detail_subjob_subjob', 'mission_detail', schema='core', type_='foreignkey')
    # op.drop_constraint('fk_mission_detail_operational_plan_operational_plan', 'mission_detail', schema='core', type_='foreignkey')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # op.create_foreign_key('fk_mission_detail_operational_plan_operational_plan', 'mission_detail', 'operational_plan', ['operational_plan'], ['value'], source_schema='core', referent_schema='core')
    # op.create_foreign_key('fk_mission_detail_subjob_subjob', 'mission_detail', 'subjob', ['subjob'], ['value'], source_schema='core', referent_schema='core')
    # op.create_foreign_key('fk_mission_detail_job_job', 'mission_detail', 'job', ['job'], ['value'], source_schema='core', referent_schema='core')
    op.add_column('copro', sa.Column('care_taker_id', sa.INTEGER(), autoincrement=False, nullable=True), schema='core')
    op.drop_constraint(op.f('fk_copro_caretaker_id_caretaker'), 'copro', schema='core', type_='foreignkey')
    op.create_foreign_key('fk_copro_care_taker_id_caretaker', 'copro', 'caretaker', ['care_taker_id'], ['id'], source_schema='core', referent_schema='core')
    op.drop_column('copro', 'caretaker_id', schema='core')
    op.drop_column('combined_structure', 'equipment_description', schema='core')
    # ### end Alembic commands ###
