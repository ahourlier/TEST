"""empty message

Revision ID: c04231341a73
Revises: 55e4a31e1790
Create Date: 2020-04-20 11:36:26.542825

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "c04231341a73"
down_revision = "127ff03c0bf3"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "agency",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        schema="core",
    )
    op.alter_column(
        "antenna",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        schema="core",
    )
    op.alter_column(
        "client",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        schema="core",
    )
    op.alter_column(
        "contact",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        schema="core",
    )
    op.alter_column(
        "disorder",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        schema="core",
    )
    op.drop_constraint(
        "fk_disorder_accomodation_id_accomodation",
        "disorder",
        schema="core",
        type_="foreignkey",
    )
    op.drop_column("disorder", "accomodation_id", schema="core")
    op.alter_column(
        "document",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        schema="core",
    )
    op.alter_column(
        "mission",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        schema="core",
    )
    op.alter_column(
        "permission",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        schema="core",
    )
    op.alter_column(
        "phone_number",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        schema="core",
    )
    op.alter_column(
        "project",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        schema="core",
    )
    op.drop_constraint(
        "uq_project_accomodation_id", "project", schema="core", type_="unique"
    )
    op.drop_constraint(
        "fk_project_accomodation_id_accomodation",
        "project",
        schema="core",
        type_="foreignkey",
    )
    op.drop_column("project", "accomodation_id", schema="core")
    op.alter_column(
        "project_lead",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        schema="core",
    )
    op.alter_column(
        "requester",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        schema="core",
    )
    op.alter_column(
        "role",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        schema="core",
    )
    op.alter_column(
        "taxable_income",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        schema="core",
    )
    op.alter_column(
        "team",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        schema="core",
    )
    op.alter_column(
        "user",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        schema="core",
    )
    op.alter_column(
        "user_group",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        schema="core",
    )
    op.drop_table("accomodation", schema="core")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "user_group",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        schema="core",
    )
    op.alter_column(
        "user",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        schema="core",
    )
    op.alter_column(
        "team",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        schema="core",
    )
    op.alter_column(
        "taxable_income",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        schema="core",
    )
    op.alter_column(
        "role",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        schema="core",
    )
    op.alter_column(
        "requester",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        schema="core",
    )
    op.alter_column(
        "project_lead",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        schema="core",
    )
    op.add_column(
        "project",
        sa.Column("accomodation_id", sa.INTEGER(), autoincrement=False, nullable=True),
        schema="core",
    )
    op.create_foreign_key(
        "fk_project_accomodation_id_accomodation",
        "project",
        "accomodation",
        ["accomodation_id"],
        ["id"],
        source_schema="core",
        referent_schema="core",
    )
    op.create_unique_constraint(
        "uq_project_accomodation_id", "project", ["accomodation_id"], schema="core"
    )
    op.alter_column(
        "project",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        schema="core",
    )
    op.alter_column(
        "phone_number",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        schema="core",
    )
    op.alter_column(
        "permission",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        schema="core",
    )
    op.alter_column(
        "mission",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        schema="core",
    )
    op.alter_column(
        "document",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        schema="core",
    )
    op.add_column(
        "disorder",
        sa.Column("accomodation_id", sa.INTEGER(), autoincrement=False, nullable=False),
        schema="core",
    )
    op.create_foreign_key(
        "fk_disorder_accomodation_id_accomodation",
        "disorder",
        "accomodation",
        ["accomodation_id"],
        ["id"],
        source_schema="core",
        referent_schema="core",
    )
    op.alter_column(
        "disorder",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        schema="core",
    )
    op.alter_column(
        "contact",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        schema="core",
    )
    op.alter_column(
        "client",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        schema="core",
    )
    op.alter_column(
        "antenna",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        schema="core",
    )
    op.alter_column(
        "agency",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        schema="core",
    )
    op.create_table(
        "accomodation",
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('core.accomodation_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "accommodation_type",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("condominium", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column("purchase_year", sa.DATE(), autoincrement=False, nullable=True),
        sa.Column("construction_year", sa.DATE(), autoincrement=False, nullable=True),
        sa.Column("levels_nb", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("rooms_nb", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "living_area",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "additional_area",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("vacant", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "commentary", sa.VARCHAR(length=800), autoincrement=False, nullable=True
        ),
        sa.Column("year_vacant_nb", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="pk_accomodation"),
        schema="core",
    )
    # ### end Alembic commands ###
